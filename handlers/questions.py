import logging
from typing import Optional, Tuple

from aiogram import Router, Bot
from aiogram.types import Message

from config import DEFAULT_GROUP_ID
from storage import PENDING

logger = logging.getLogger(__name__)
router = Router()

MEMBER_CACHE = {}  # user_id -> True/False (–≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –Ω–µ—Ç)

async def check_member(bot: Bot, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ, —Å –∫—ç—à–µ–º.
    """
    if MEMBER_CACHE.get(user_id):
        return True
    try:
        member = await bot.get_chat_member(DEFAULT_GROUP_ID, user_id)
        in_group = member.status in ["member", "administrator", "creator"]
        logger.info(f"—Å—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ {member.status}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}: {e}")
        in_group = False
    MEMBER_CACHE[user_id] = in_group
    return in_group

async def handle_house_step(message: Message, pending_key: Tuple[int, int]):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥ house: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —à–∞–≥ –Ω–∞ apartment
    """
    user_id = message.from_user.id
    house_number = message.text.strip()
    if house_number not in ["1", "2"]:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2")
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–º–∞ {house_number} –¥–ª—è user_id={user_id}")
        return False

    PENDING[pending_key]["house"] = house_number
    PENDING[pending_key]["step"] = "apartment"
    await message.answer("–®–∞–≥ 2Ô∏è‚É£: –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–º–µ—Ä –¥–æ–º–∞ {house_number} –¥–ª—è user_id={user_id}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É apartment")
    return True

async def handle_apartment_step(message: Message, pending_key: Tuple[int, int]):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥ apartment: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    user_id = message.from_user.id
    website = "https://okto.pythonanywhere.com/ru/register/"
    try:
        apartment_number = int(message.text.strip())
        house = PENDING[pending_key]["house"]

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        if house == "1" and not (1 <= apartment_number <= 266):
            await message.answer("–û—à–∏–±–∫–∞: –¥–ª—è –¥–æ–º–∞ 1 –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 266")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã {apartment_number} –¥–ª—è –¥–æ–º–∞ 1, user_id={user_id}")
            return False
        elif house == "2" and not (1 <= apartment_number <= 290):
            await message.answer("–û—à–∏–±–∫–∞: –¥–ª—è –¥–æ–º–∞ 2 –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 290")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã {apartment_number} –¥–ª—è –¥–æ–º–∞ 2, user_id={user_id}")
            return False

        PENDING[pending_key]["apartment"] = str(apartment_number)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã {apartment_number} –¥–ª—è –¥–æ–º–∞ {house}, user_id={user_id}")

        # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏:\n"
            f"üè† –î–æ–º: {house}\n"
            f"üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment_number}\n"
            f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ <a href="{website}">–ø–æ—Ä—Ç–∞–ª–µ –ñ–ö</a>.\n'
            f"–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
            parse_mode='HTML'
        )
        return True
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è user_id={user_id}")
        return False

@router.message(lambda message: message.content_type == "text")
async def process_answer(message: Message, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}, —Ç–µ–∫—Å—Ç={message.text}")

    # –∏—â–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PENDING
    pending_key: Optional[Tuple[int, int]] = None
    for key, data in PENDING.items():
        if data.get("user_id") == user_id:
            pending_key = key  # key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Tuple[int, int]
            break

    if not pending_key:
        if await check_member(bot, user_id):
            return  # —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ, –Ω–µ —Å–ø–∞–º–∏–º
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.")
        return

    step = PENDING[pending_key]["step"]
    if step == "house":
        await handle_house_step(message, pending_key)
    elif step == "apartment":
        await handle_apartment_step(message, pending_key)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ {step} –¥–ª—è user_id={user_id}")
