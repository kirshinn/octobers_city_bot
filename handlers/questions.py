from aiogram import Router, Bot
from aiogram.types import Message
from storage import PENDING, approve_and_save
import logging

logger = logging.getLogger(__name__)

router = Router()

@router.message(lambda message: message.content_type == "text")
async def process_answer(message: Message, bot: Bot):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}, —Ç–µ–∫—Å—Ç={message.text}")

    # –ò—â–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PENDING
    pending_key = None
    for key, data in PENDING.items():
        if data.get("user_id") == user_id:
            pending_key = key
            break

    if not pending_key:
        logger.info(f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id}")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.")
        return

    group_chat_id = pending_key[0]
    step = PENDING[pending_key]["step"]

    if step == "house":
        house_number = message.text
        if house_number not in ["1", "2"]:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–æ–º–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2")
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–º–∞ {house_number} –¥–ª—è user_id={user_id}")
            return
        PENDING[pending_key]["house"] = house_number
        PENDING[pending_key]["step"] = "apartment"
        await message.answer("–®–∞–≥ 2Ô∏è‚É£: –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã")
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–º–µ—Ä –¥–æ–º–∞ –¥–ª—è user_id={user_id}, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É apartment")
    elif step == "apartment":
        try:
            apartment_number = int(message.text)
            house = PENDING[pending_key]["house"]
            if house == "1" and not (1 <= apartment_number <= 266):
                await message.answer("–û—à–∏–±–∫–∞: –¥–ª—è –¥–æ–º–∞ 1 –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 266")
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã {apartment_number} –¥–ª—è –¥–æ–º–∞ 1, user_id={user_id}")
                return
            elif house == "2" and not (1 <= apartment_number <= 290):
                await message.answer("–û—à–∏–±–∫–∞: –¥–ª—è –¥–æ–º–∞ 2 –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 290")
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã {apartment_number} –¥–ª—è –¥–æ–º–∞ 2, user_id={user_id}")
                return
            PENDING[pending_key]["apartment"] = str(apartment_number)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã {apartment_number} –¥–ª—è –¥–æ–º–∞ {house}, user_id={user_id}")

            # if not approve_and_save(group_chat_id, user_id, pending_key):
            #     await message.answer(f"‚ùå –¢–∞–∫–æ–π –¥–æ–º –∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            #     await bot.decline_chat_join_request(group_chat_id, user_id)
            #     logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è user_id={user_id}, group_chat_id={group_chat_id}: —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            #     return

            await message.answer(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏:\n"
                f"üè† –î–æ–º: {house}\n"
                f"üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n"
                f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞."
            )

            # await bot.approve_chat_join_request(chat_id=group_chat_id, user_id=user_id)
            # PENDING.pop(pending_key)
            # logger.info(f"–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è user_id={user_id}, group_chat_id={group_chat_id}")
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–ª—è user_id={user_id}")
            return
    else:
        logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –¥–ª—è user_id={user_id}: {step}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")